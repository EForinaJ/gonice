// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sys_circle

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_circle.
type Entity struct {
    CircleId   int64       `orm:"circle_id,primary" json:"circle_id"`   //                                  
    CircleName string      `orm:"circle_name"       json:"circle_name"` // 圈子名称                         
    CircleDesc string      `orm:"circle_desc"       json:"circle_desc"` // 圈子描述                         
    CircleImg  string      `orm:"circle_img"        json:"circle_img"`  // 圈子背景图                       
    CateId     int64       `orm:"cate_id"           json:"cate_id"`     // 圈子所属分类                     
    UserId     int64       `orm:"user_id"           json:"user_id"`     // 管理者                           
    JoinType   string      `orm:"join_type"         json:"join_type"`   // 圈子加入的权限类型               
    JoinValue  float64     `orm:"join_value"        json:"join_value"`  // 加入值                           
    CreateBy   string      `orm:"create_by"         json:"create_by"`   // 创建者                           
    CreateTime *gtime.Time `orm:"create_time"       json:"create_time"` // 创建时间                         
    UpdateBy   string      `orm:"update_by"         json:"update_by"`   // 更新者                           
    UpdateTime *gtime.Time `orm:"update_time"       json:"update_time"` // 更新时间                         
    Status     string      `orm:"status"            json:"status"`      // 状态（0正常 1停用）              
    DelFlag    string      `orm:"del_flag"          json:"del_flag"`    // 删除标志（0代表存在 2代表删除）  
    Remark     string      `orm:"remark"            json:"remark"`      // 备注                             
    PostCount  int64       `orm:"post_count"        json:"post_count"`  // 帖子数量                         
    JoinCount  int64       `orm:"join_count"        json:"join_count"`  // 加入数量                         
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}