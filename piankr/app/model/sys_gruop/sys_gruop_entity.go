// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sys_gruop

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_gruop.
type Entity struct {
    GruopId    int64       `orm:"gruop_id,primary" json:"gruop_id"`    //                               
    GruopName  string      `orm:"gruop_name"       json:"gruop_name"`  // 小组名称                      
    GruopType  string      `orm:"gruop_type"       json:"gruop_type"`  // 小组标识                      
    GruopImg   string      `orm:"gruop_img"        json:"gruop_img"`   // 小组图标                      
    DownTimes  int         `orm:"down_times"       json:"down_times"`  // 下载次数                      
    OpenType   string      `orm:"open_type"        json:"open_type"`   // 开通方式（1 积分 ， 2 付费）  
    OpenValue  float64     `orm:"open_value"       json:"open_value"`  // 开通费用                      
    Validity   int         `orm:"validity"         json:"validity"`    // 有效期                        
    AuthModule string      `orm:"auth_module"      json:"auth_module"` // 权限模块                      
    Status     string      `orm:"status"           json:"status"`      // 小组状态( 0: 否，1：是)       
    Remark     string      `orm:"remark"           json:"remark"`      // 备注                          
    CreateBy   string      `orm:"create_by"        json:"create_by"`   // 创建者                        
    CreateTime *gtime.Time `orm:"create_time"      json:"create_time"` // 创建时间                      
    UpdateBy   string      `orm:"update_by"        json:"update_by"`   // 更新者                        
    UpdateTime *gtime.Time `orm:"update_time"      json:"update_time"` // 更新时间                      
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}