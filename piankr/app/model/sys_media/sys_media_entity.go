// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package sys_media

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_media.
type Entity struct {
    MediaId    int64       `orm:"media_id,primary" json:"media_id"`    //                                     
    UserId     uint64      `orm:"user_id"          json:"user_id"`     // 上传的用户                          
    Link       string      `orm:"link"             json:"link"`        // 文件链接                            
    Path       string      `orm:"path"             json:"path"`        // 存放路径                            
    Name       string      `orm:"name"             json:"name"`        // 文件名称                            
    OrName     string      `orm:"or_name"          json:"or_name"`     // 原始文件名称                        
    Size       string      `orm:"size"             json:"size"`        // 文件大小                            
    UploadKey  string      `orm:"upload_key"       json:"upload_key"`  // 上传方式 1 为本地上传， 2为oss上传  
    Ext        string      `orm:"ext"              json:"ext"`         // 文件后缀                            
    CreateTime *gtime.Time `orm:"create_time"      json:"create_time"` // 创建时间                            
    UpdateTime *gtime.Time `orm:"update_time"      json:"update_time"` // 更新时间                            
    DelFlag    string      `orm:"del_flag"         json:"del_flag"`    // 删除标志（0代表存在 2代表删除）     
    MediaType  string      `orm:"media_type"       json:"media_type"`  // 文件类型                            
    Remark     string      `orm:"remark"           json:"remark"`      // 备注                                
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}